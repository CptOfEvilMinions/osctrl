name: Build and test PRs pushed to Ocstrl

on: [push, pull_request]

env:
  GOLANG_VERSION: 1.18.1

jobs:
  build_and_test:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        components: ['tls', 'admin', 'api', 'cli']
        goos: ['linux']
        goarch: ['amd64']
    steps:
      ########################### Checkout code ###########################
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      ########################### Generate SHA1 commit hash ###########################
      # https://newbedev.com/getting-current-branch-and-commit-hash-in-github-action
      - name: Declare GIT hash and branch
        id: vars
        shell: bash
        run: |
          echo ::set-output name=RELEASE_VERSION::${GITHUB_REF#refs/*/}
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      ########################### Build osctrl ###########################
      - name: Build osctrl binaries
        uses: ./.github/actions/build/binaries
        with:
          go_os: ${{ matrix.goos }}
          go_arch: ${{ matrix.goarch }}
          osctrl_component: ${{ matrix.components }}
          commit_sha: ${{ steps.vars.outputs.sha_short }}
          docker_tag: ${{ steps.vars.outputs.RELEASE_VERSION }}
          docker_hub_org: ${{ secrets.DOCKER_HUB_ORG }}
          docker_hub_username: ${{ secrets.DOCKER_HUB_USERNAME }}
          docker_hub_access_token: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      ########################### Test binaries ###########################
      # - name: Run tests
      #   id: bin_tests
      #   uses: ./.github/actions/test/binaries
      #   with:
      #     go_os: "${{ matrix.goos }}"
      #     go_arch: "${{ matrix.goarch }}"
      #     osctrl_component: "${{ matrix.components }}"
      #     commit_sha: "${{ steps.vars.outputs.sha_short }}"
      #     commit_branch: "${{ steps.vars.outputs.branch }}"
      #     golang_version: "${{ env.GOLANG_VERSION }}"
